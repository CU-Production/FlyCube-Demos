#pragma once
#include <RenderDevice/RenderDevice.h>
#include <RenderDevice/ProgramHolder.h>
#include <RenderDevice/BufferLayout.h>
#include <glm/glm.hpp>
#include <array>
#include <vector>
#include <memory>

struct {{ShaderName}}Desc
{
    static constexpr ShaderType type = {{ShaderType}};
    ShaderDesc desc = { "{{ShaderPath}}", "{{Entrypoint}}", type, "{{ShaderModel}}" };{{#HasCBuffers}}

    struct CBV
    {
{{#CBuffers}}        BindKey {{Name}};
{{/CBuffers}}    } cbv;{{/HasCBuffers}}{{#HasTextures}}

    struct SRV
    {
{{#Textures}}       BindKey {{Name}};
{{/Textures}}    } srv;{{/HasTextures}}{{#HasUAVs}}

    struct UAV
    {
{{#UAVs}}       BindKey {{Name}};
{{/UAVs}}    } uav;{{/HasUAVs}}{{#HasInputs}}

    struct IA
    {
{{#Inputs}}        static constexpr const uint32_t {{Name}} = {{Slot}};
{{/Inputs}}    } ia;{{/HasInputs}}{{#HasOutputs}}

    struct OM
    {
{{#Outputs}}        static constexpr const uint32_t rtv{{Slot}} = {{Slot}};
{{/Outputs}}
    } om;{{/HasOutputs}}{{#HasSamplers}}

    struct Sampler
    {
{{#Samplers}}       BindKey {{Name}};
{{/Samplers}}    } sampler;{{/HasSamplers}}
};

class {{ShaderName}} : public {{ShaderName}}Desc
{
public:{{#CBuffers}}
    struct {{Name}}
    {
{{#CBufferVariables}}        {{&VariableType}} {{VariableName}};
{{/CBufferVariables}}    };
{{/CBuffers}}{{#CBuffers}}
    BufferLayout {{Name}}_layout = {
        {{CBufferSize}},
        { {{#CBufferVariables}}{{VariableSize}}, {{/CBufferVariables}} },
        { {{#CBufferVariables}}offsetof({{Name}}, {{VariableName}}), {{/CBufferVariables}} },
        { {{#CBufferVariables}}{{VariableOffset}}, {{/CBufferVariables}} }
    };
{{/CBuffers}}{{#HasCBuffers}}
    struct Cbuffer
    {
        Cbuffer({{ShaderName}}& shader, RenderDevice& device){{#CBuffers}}
            {{CBufferSeparator}} {{Name}}(device, shader.{{Name}}_layout){{/CBuffers}}
        {
        }
{{#CBuffers}}
        ConstantBuffer<{{Name}}> {{Name}};{{/CBuffers}}
    } cbuffer;

    {{ShaderName}}(RenderDevice& device)
        : cbuffer(*this, device)
    {
    }{{/HasCBuffers}}{{^HasCBuffers}}
    {{ShaderName}}(RenderDevice& device)
    {
    }{{/HasCBuffers}}

    void CompileShader(RenderDevice& device)
    {
        auto full_desc = desc;
        full_desc.shader_path = ASSETS_PATH + full_desc.shader_path;
        shader = device.CompileShader(full_desc);{{#CBuffers}}
        cbv.{{Name}} = shader->GetBindKey("{{Name}}");{{/CBuffers}}{{#Textures}}
        srv.{{Name}} = shader->GetBindKey("{{Name}}");{{/Textures}}{{#UAVs}}
        uav.{{Name}} = shader->GetBindKey("{{Name}}");{{/UAVs}}{{#Samplers}}
        sampler.{{Name}} = shader->GetBindKey("{{Name}}");{{/Samplers}}
    }

    std::shared_ptr<Shader> shader;
};
